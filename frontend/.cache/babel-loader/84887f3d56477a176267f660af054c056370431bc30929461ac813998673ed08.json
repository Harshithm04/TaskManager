{"ast":null,"code":"import axios from 'axios';\nimport { getAccessToken, getRefreshToken, setAccessToken, logout } from '../context/AuthContext';\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api/',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to attach the access token\napi.interceptors.request.use(config => {\n  const token = getAccessToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor to handle 401 (token expired)\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // If 401 and we haven't already tried refreshing\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = getRefreshToken();\n    if (refreshToken) {\n      try {\n        const response = await axios.post('http://localhost:8000/api/token/refresh/', {\n          refresh: refreshToken\n        });\n        const newAccess = response.data.access;\n        setAccessToken(newAccess);\n        originalRequest.headers.Authorization = `Bearer ${newAccess}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        // Refresh failed or expired → log out\n        logout();\n        return Promise.reject(refreshError);\n      }\n    } else {\n      // No refresh token → log out\n      logout();\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","getAccessToken","getRefreshToken","setAccessToken","logout","api","create","baseURL","headers","interceptors","request","use","config","token","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","refresh","newAccess","data","access","refreshError"],"sources":["C:/Desktop/taskmanager-frontend/src/api/axiosConfig.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getAccessToken, getRefreshToken, setAccessToken, logout } from '../context/AuthContext';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8000/api/',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to attach the access token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = getAccessToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Response interceptor to handle 401 (token expired)\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n\r\n    // If 401 and we haven't already tried refreshing\r\n    if (\r\n      error.response &&\r\n      error.response.status === 401 &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true;\r\n      const refreshToken = getRefreshToken();\r\n      if (refreshToken) {\r\n        try {\r\n          const response = await axios.post('http://localhost:8000/api/token/refresh/', {\r\n            refresh: refreshToken,\r\n          });\r\n          const newAccess = response.data.access;\r\n          setAccessToken(newAccess);\r\n          originalRequest.headers.Authorization = `Bearer ${newAccess}`;\r\n          return api(originalRequest);\r\n        } catch (refreshError) {\r\n          // Refresh failed or expired → log out\r\n          logout();\r\n          return Promise.reject(refreshError);\r\n        }\r\n      } else {\r\n        // No refresh token → log out\r\n        logout();\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,eAAe,EAAEC,cAAc,EAAEC,MAAM,QAAQ,wBAAwB;AAEhG,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAE,4BAA4B;EACrCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGZ,cAAc,CAAC,CAAC;EAC9B,IAAIY,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACM,aAAa,GAAG,UAAUD,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAG,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAV,GAAG,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACH,MAAM;;EAEpC;EACA,IACEG,KAAK,CAACG,QAAQ,IACdH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAC7B,CAACD,eAAe,CAACE,MAAM,EACvB;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,MAAMC,YAAY,GAAGpB,eAAe,CAAC,CAAC;IACtC,IAAIoB,YAAY,EAAE;MAChB,IAAI;QACF,MAAMJ,QAAQ,GAAG,MAAMlB,KAAK,CAACuB,IAAI,CAAC,0CAA0C,EAAE;UAC5EC,OAAO,EAAEF;QACX,CAAC,CAAC;QACF,MAAMG,SAAS,GAAGP,QAAQ,CAACQ,IAAI,CAACC,MAAM;QACtCxB,cAAc,CAACsB,SAAS,CAAC;QACzBN,eAAe,CAACX,OAAO,CAACM,aAAa,GAAG,UAAUW,SAAS,EAAE;QAC7D,OAAOpB,GAAG,CAACc,eAAe,CAAC;MAC7B,CAAC,CAAC,OAAOS,YAAY,EAAE;QACrB;QACAxB,MAAM,CAAC,CAAC;QACR,OAAOY,OAAO,CAACC,MAAM,CAACW,YAAY,CAAC;MACrC;IACF,CAAC,MAAM;MACL;MACAxB,MAAM,CAAC,CAAC;IACV;EACF;EAEA,OAAOY,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}